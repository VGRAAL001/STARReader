@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using System.Collections.Generic
@using Microsoft.CognitiveServices.Speech;
@using Microsoft.CognitiveServices.Speech.Audio;
@using Microsoft.CognitiveServices.Speech.Translation;

<div class="combo-box">
    <label for="languageComboBox">Choose a language:</label>
    <select id="languageComboBox" @onchange="OnLanguageChange" name="languageComboBox">
        <option value="">--Select Language--</option>
        <option value="1">English</option>
        <option value="2">Afrikaans</option>
        <option value="3">isiZulu</option>
    </select>

    <br />

    <label for="voiceComboBox">Choose a voice:</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <select id="voiceComboBox" @onchange="OnVoiceChange" name="voiceComboBox" disabled="@disableVoiceCombo">
        <option value="">--Select Voice--</option>
        @if (voices != null)
        {
            @foreach (var voice in voices)
            {
                <option value="@voice">@voice</option>
            }
        }
    </select>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
&nbsp;&nbsp;&nbsp;&nbsp;<button @onclick="playAudio" disabled="@disablePlay"><i class=@buttonType></i></button>

@code {
    [Parameter]
    public string? SelectedText { get; set; }

    private string selectedLanguageCode = "";
    private string selectedVoiceCode = "";
    private List<string> voices = new List<string>();
    private bool disableVoiceCombo => string.IsNullOrEmpty(selectedLanguageCode);
    private bool disablePlay => string.IsNullOrEmpty(selectedVoiceCode) || string.IsNullOrEmpty(selectedLanguageCode) || string.IsNullOrEmpty(SelectedText);
    public string buttonType = "fas fa-play";

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    async Task<byte[]> SynthesizeAudioAsync()
    {
        var config = SpeechConfig.FromSubscription("5efe52b12721446b8053109674e1d9d4", "southafricanorth");
        config.SpeechSynthesisLanguage = selectedLanguageCode; ///language should be get and set from database; not hardcoded
        config.SpeechSynthesisVoiceName = selectedVoiceCode; ///accent

        using var synthesizer = new SpeechSynthesizer(config); //runs text to speech conversions in-memory stream
        using var result = await synthesizer.SpeakTextAsync(SelectedText);
        if (result.Reason == ResultReason.SynthesizingAudioCompleted)
        {
            //Console.WriteLine($"Speech synthesized for text [{answer}], and the audio was saved to [{fileName}]");
            var data = result.AudioData;
            return data;
            //answerSpokenFile = fileName;
        }
        else if (result.Reason == ResultReason.Canceled)
        {
            var cancellation = SpeechSynthesisCancellationDetails.FromResult(result);
            Console.WriteLine($"CANCELED: Reason={cancellation.Reason}");
            if (cancellation.Reason == CancellationReason.Error)
            {
                Console.WriteLine($"CANCELED: ErrorCode={cancellation.ErrorCode}");
                Console.WriteLine($"CANCELED: ErrorDetails={cancellation.ErrorDetails}");
                Console.WriteLine($"CANCELED: Did you update the subscription info?");
            }
            return [];
        }

        return result.AudioData;
    }

    async Task OnLanguageChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        selectedLanguageCode = e.Value.ToString();
        switch (selectedLanguageCode)
        {
            case "1":
                voices = new List<string> { "EnglishA", "EnglishB", "EnglishC", "EnglishD", "EnglishE" };
                break;
            case "2":
                voices = new List<string> { "Afr1", "Afr2" };
                break;
            case "3":
                voices = new List<string> { "Zul1", "Zul2", "Zul3" };
                break;
            default:
                voices = new List<string>(); // No voices for an unselected language
                break;
        }
    }

    void OnVoiceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedVoice = e.Value.ToString();

        // Set the selectedLanguageCode and selectedVoiceCode based on the voice and language combination
        switch (selectedVoice)
        {
            case "EnglishA":
                selectedLanguageCode = "en-AU";
                selectedVoiceCode = "en-AU-NatashaNeural";
                break;
            case "EnglishB":
                selectedLanguageCode = "en-AU";
                selectedVoiceCode = "en-AU-WilliamNeural";
                break;
            case "EnglishC":
                selectedLanguageCode = "en-GB";
                selectedVoiceCode = "en-GB-SoniaNeural";
                break;
            case "Afr1":
                selectedLanguageCode = "af-ZA";
                selectedVoiceCode = "af-ZA-AdriNeural3";
                break;
            case "Afr2":
                selectedLanguageCode = "af-ZA";
                selectedVoiceCode = "af-ZA-WillemNeural3";
                break;
            case "Zul1":
                selectedLanguageCode = "zu-ZA";
                selectedVoiceCode = "zu-ZA-ThandoNeural3";
                break;
            case "Zul2":
                selectedLanguageCode = "zu-ZA";
                selectedVoiceCode = "zu-ZA-ThembaNeural3";
                break;
            case "Zul3":
                selectedLanguageCode = "zu-ZA";
                selectedVoiceCode = "zu-ZA-LungeloNeural";
                break;
            default:
                selectedLanguageCode = string.Empty;
                selectedVoiceCode = string.Empty;
                break;
        }
    }

    async Task playAudio()
    {
        if (buttonType == "fas fa-play")
        {
            buttonType = "fas fa-pause";
            var audioData = await SynthesizeAudioAsync();
            buttonType = "fas fa-play";
        }

        else
        {
            buttonType = "fas fa-play";
            await StopSpeakingAsync();
        }
    }

    async Task StopSpeakingAsync()
    {
        //await synthesizer.StopSpeakingAsync();

    }


}
