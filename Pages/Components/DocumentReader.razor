@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using System.Collections.Generic
@using Microsoft.CognitiveServices.Speech;
@using Microsoft.CognitiveServices.Speech.Audio;
@using Microsoft.CognitiveServices.Speech.Translation;

<div class="combo-box">
    <label for="languageComboBox">Choose a language:</label>
    <select id="languageComboBox" @onchange="OnLanguageChange" name="languageComboBox">
        <option value="">--Select Language--</option>
        <option value="1">English</option>
        <option value="2">Afrikaans</option>
        <option value="3">isiZulu</option>
    </select>

    <br />

    <label for="voiceComboBox">Choose a voice:</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <select id="voiceComboBox" @onchange="OnVoiceChange" name="voiceComboBox" disabled="@disableVoiceCombo">
        <option value="">--Select Voice--</option>
        @if (voices != null)
        {
            @foreach (var voice in voices)
            {
                <option value="@voice">@voice</option>
            }
        }
    </select>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
&nbsp;&nbsp;&nbsp;&nbsp;<button @onclick="playAudio" disabled="@disablePlay"><i class=@buttonType></i></button>

@code {
    [Parameter]
    public string? SelectedText { get; set; }

    private string selectedLanguageCode = "";
    private string selectedVoiceCode = "";
    private List<string> voices = new List<string>();
    private bool disableVoiceCombo => string.IsNullOrEmpty(selectedLanguageCode);
    private bool disablePlay => string.IsNullOrEmpty(selectedVoiceCode) || string.IsNullOrEmpty(selectedLanguageCode) || string.IsNullOrEmpty(SelectedText);
    public string buttonType = "fas fa-play";
    private SpeechSynthesizer synthesizer;

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    async Task<byte[]> SynthesizeAudioAsync()
    {
        var config = SpeechConfig.FromSubscription("2f2a1ab47ab648c0836ac088c7562d21", "southafricanorth");
        config.SpeechSynthesisLanguage = selectedLanguageCode; 
        config.SpeechSynthesisVoiceName = selectedVoiceCode; 

        using var synthesizer = new SpeechSynthesizer(config); //runs text to speech conversions in-memory stream
        using var result = await synthesizer.SpeakTextAsync(SelectedText);
        if (result.Reason == ResultReason.SynthesizingAudioCompleted)
        {
            var data = result.AudioData;
            return data;
        }
        else if (result.Reason == ResultReason.Canceled)
        {
            var cancellation = SpeechSynthesisCancellationDetails.FromResult(result);
            Console.WriteLine($"CANCELED: Reason={cancellation.Reason}");
            if (cancellation.Reason == CancellationReason.Error)
            {
                Console.WriteLine($"CANCELED: ErrorCode={cancellation.ErrorCode}");
                Console.WriteLine($"CANCELED: ErrorDetails={cancellation.ErrorDetails}");
                Console.WriteLine($"CANCELED: Did you update the subscription info?");
            }
            return [];
        }

        return result.AudioData;
    }

    async Task OnLanguageChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        selectedLanguageCode = e.Value.ToString();
        switch (selectedLanguageCode)
        {
            case "1":
                voices = new List<string> {"Eng-Female-ZA", "Eng-Male-ZA", "Eng-Female-KE", "Eng-Male-KE", "Eng-Female-NG", "Eng-Male-NG", 
                "Eng-Female-TZ", "Eng-Male-TZ", "Eng-Female-US", "Eng-Male-US", "Eng-Female-AU", "Eng-Male-AU", "Eng-Female-UK", "Eng-Male-UK", 
                "Eng-Female-SG", "Eng-Male-SG","Eng-Female-IN", "Eng-Male-IN" };
                break;
            case "2":
                voices = new List<string> { "Afr-Female", "Afr-Male" };
                break;
            case "3":
                voices = new List<string> { "Zul-Female", "Zul-Male"};
                break;
            default:
                voices = new List<string>(); // No voices for an unselected language
                break;
        }
    }

    void OnVoiceChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedVoice = e.Value.ToString();
        // Set the selectedLanguageCode and selectedVoiceCode based on the voice and language combination
        switch (selectedVoice)
        {
            case "Eng-Female-ZA":
                selectedLanguageCode = "en-ZA";
                selectedVoiceCode = "en-ZA-LeahNeural";
                break;
            case "Eng-Male-ZA":
                selectedLanguageCode = "en-ZA";
                selectedVoiceCode = "en-ZA-LukeNeural";
                break;
            case "Eng-Female-KE":
                selectedLanguageCode = "en-KE";
                selectedVoiceCode = "en-KE-AsiliaNeural";
                break;
            case "Eng-Male-KE":
                selectedLanguageCode = "en-KE";
                selectedVoiceCode = "en-KE-ChilembaNeural";
                break;
            case "Eng-Female-NG":
                selectedLanguageCode = "en-NG";
                selectedVoiceCode = "en-NG-EzinneNeural";
                break;
            case "Eng-Male-NG":
                selectedLanguageCode = "en-NG";
                selectedVoiceCode = "en-NG-AbeoNeural";
                break;
            case "Eng-Female-TZ":
                selectedLanguageCode = "en-TZ";
                selectedVoiceCode = "en-TZ-ImaniNeural";
                break;
            case "Eng-Male-TZ":
                selectedLanguageCode = "en-TZ";
                selectedVoiceCode = "en-TZ-ElimuNeural";
                break;
            case "Eng-Female-US":
                selectedLanguageCode = "en-US";
                selectedVoiceCode = "en-US-AvaNeural";
                break;
            case "Eng-Male-US":
                selectedLanguageCode = "en-US";
                selectedVoiceCode = "en-US-AndrewNeural";
                break;
            case "Eng-Female-AU":
                selectedLanguageCode = "en-AU";
                selectedVoiceCode = "en-AU-NatashaNeural";
                break;
            case "Eng-Male-AU":
                selectedLanguageCode = "en-AU";
                selectedVoiceCode = "en-AU-WilliamNeural";
                break;
            case "Eng-Female-UK":
                selectedLanguageCode = "en-GB";
                selectedVoiceCode = "en-GB-SoniaNeural";
                break;
            case "Eng-Male-UK":
                selectedLanguageCode = "en-GB";
                selectedVoiceCode = "en-GB-RyanNeural";
                break;
            case "Eng-Female-SG":
                selectedLanguageCode = "en-SG";
                selectedVoiceCode = "en-SG-LunaNeural";
                break;
            case "Eng-Male-SG":
                selectedLanguageCode = "en-SG";
                selectedVoiceCode = "en-SG-WayneNeural";
                break;
            case "Eng-Female-IN":
                selectedLanguageCode = "en-IN";
                selectedVoiceCode = "en-IN-NeerjaNeural";
                break;
            case "Eng-Male-IN":
                selectedLanguageCode = "en-IN";
                selectedVoiceCode = "en-IN-PrabhatNeural";
                break;
            case "Afr-Female":
                selectedLanguageCode = "af-ZA";
                selectedVoiceCode = "af-ZA-AdriNeural";
                break;
            case "Afr-Male":
                selectedLanguageCode = "af-ZA";
                selectedVoiceCode = "af-ZA-WillemNeural";
                break;
            case "Zul-Female":
                selectedLanguageCode = "zu-ZA";
                selectedVoiceCode = "zu-ZA-ThandoNeural";
                break;
            case "Zul-Male":
                selectedLanguageCode = "zu-ZA";
                selectedVoiceCode = "zu-ZA-ThembaNeural";
                break;

            default:
                selectedLanguageCode = string.Empty;
                selectedVoiceCode = string.Empty;
                break;
        }
    }

    async Task playAudio()
    {
        if (buttonType == "fas fa-play")
        {
            buttonType = "fas fa-pause";
            var audioData = await SynthesizeAudioAsync();
            buttonType = "fas fa-play";
        }

        else
        {
            buttonType = "fas fa-play";
            // await StopSpeakingAsync();
        }
    }

   


}
